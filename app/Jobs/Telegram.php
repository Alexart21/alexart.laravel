<?php

namespace App\Jobs;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldBeUnique;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use App\Helpers\TG;
use Illuminate\Support\Facades\Log;

class Telegram implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    private $data;

    public function __construct($data)
    {
        $this->data = $data;
    }

    /**
     * Execute the job.
     *
     * @return void
     */
    public function handle()
    {
        // –≤—Å–µ –æ–±–µ—Ä–Ω—É—Ç–æ –≤ try catch
        try{
            if(isset($this->data['message'])){
                $input_msg = isset($this->data['message']['text']) ? mb_strtolower($this->data['message']['text']) : '';
                $chat_id = $this->data['message']['chat']['id'];
                $msg_id = $this->data['message']['message_id'];

            }elseif($this->data['callback_query']){ // –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É inline_keyboard
                $btnData = mb_strtolower($this->data['callback_query']['data']);
                $chat_id = $this->data['callback_query']['message']['chat']['id'];
                $msg_id = $this->data['callback_query']['message']['message_id'];
            }
            // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
            // –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç –ø–∞–ø–∫–∏ public
//            TG::sendFile($chat_id, 'img/msg.png', 'my_photo');
//            TG::sendMessage($chat_id, 'bla');
            $btns = [
                'inline_keyboard' => [
                    [
                        [
                            'text' => '—è–±–ª–æ–∫–∏',
                            'callback_data' => 1
                        ],
                        [
                            'text' => '–≥—Ä—É—à–∏',
                            'callback_data' => 2
                        ]
                    ],
                    [
                        [
                            'text' => '–ª—É–∫',
                            'callback_data' => 3
                        ],
                        [
                            'text' => '—á–µ—Å–Ω–æ–∫',
                            'callback_data' => 4
                        ]
                    ]
                ]
            ];
            $btns_text = '<b>–°–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑ :</b>';

            if(isset($this->data['callback_query'])){
                if($btnData == 1){
                    $selected = '—è–±–ª–æ–∫–∏';
                    $icon = 'üçè';
                    $btns['inline_keyboard'][0][0]['text'] = '‚úÖ' . '—è–±–ª–æ–∫–∏';
                }elseif ($btnData == 2){
                    $selected = '–≥—Ä—É—à–∏';
                    $icon = 'üçê';
                    $btns['inline_keyboard'][0][1]['text'] = '‚úÖ' . '–≥—Ä—É—à–∏';
                }elseif ($btnData == 3){
                    $selected = '–ª—É–∫';
                    $icon = 'üßÖ';
                    $btns['inline_keyboard'][1][0]['text'] = '‚úÖ' . '–ª—É–∫';
                }elseif ($btnData == 4){
                    $selected = '—á–µ—Å–Ω–æ–∫';
                    $icon = 'üßÑ';
                    $btns['inline_keyboard'][1][1]['text'] = '‚úÖ' . '—á–µ—Å–Ω–æ–∫';
                }else{
                    TG::sendMessage($chat_id, '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...');
                    die;
                }
                TG::editButtons($chat_id, $btns, $btns_text, $msg_id);
                TG::sendMessage($chat_id, '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –î–æ—Å—Ç–∞–≤–∏–º –í–∞–º ' . $selected . '! ' . $icon);
                die;
            }
            TG::sendButtons($chat_id, $btns, $btns_text);
        } catch (Throwable $e) {
            // —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—á—Ç—å –ø—Ä–∏–±–µ–π —Ñ-–∏—é report() –≤ app/Exceptions/Handler.php
            report($e);
            return false;
        }

    }

}
